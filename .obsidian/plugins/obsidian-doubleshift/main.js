/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => Doubleshift2,
  findCommand: () => findCommand
});
var import_obsidian3 = __toModule(require("obsidian"));

// src/CommandSuggestion.ts
var import_obsidian = __toModule(require("obsidian"));
var commandSuggestion = class extends import_obsidian.FuzzySuggestModal {
  constructor(app2, plugin, shortcut) {
    super(app2);
    var _a, _b;
    this.plugin = plugin;
    this.shortcut = shortcut;
    this.setPlaceholder((_b = (_a = findCommand(shortcut.command)) == null ? void 0 : _a.name) != null ? _b : shortcut.command);
    this.open();
  }
  getItems() {
    return Object.values(this.plugin.commands);
  }
  getItemText(command) {
    return command.name;
  }
  onChooseItem(item, evt) {
    let command = findCommand(this.getItemText(item));
    this.shortcut.command = command.id;
    this.plugin.saveSettings();
    this.plugin.settingsTab.display();
  }
};

// src/DoubleshiftSettings.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/Shortcut.ts
var ShortcutCreator = class {
  constructor(plugin) {
    let shortcut = new class {
      constructor() {
        this.command = "";
        this.key = "Shift";
        this.lastKeyUpTime = Date.now();
      }
    }();
    new commandSuggestion(plugin.app, plugin, shortcut);
    plugin.settings.shortcuts.push(shortcut);
  }
};

// src/DoubleshiftSettings.ts
var DoubleshiftSettings = class extends import_obsidian2.PluginSettingTab {
  constructor(app2, plugin, commands) {
    super(app2, plugin);
    this.plugin = plugin;
    this.commands = commands;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Delay").setDesc("The maximum delay between two presses of the respective key in 1/10 of a second").setTooltip("depending on how fast you type a too high number might annoy you").addSlider((component) => {
      component.setValue(this.plugin.settings.delay / 10).setDynamicTooltip().onChange((value) => __async(this, null, function* () {
        this.plugin.settings.delay = Number(value * 10);
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Shortcuts").setDesc("all shortcuts you have currently set up").setHeading().setDisabled(true);
    this.plugin.settings.shortcuts.forEach((shortcut) => {
      let available = findCommand(shortcut.command) !== null;
      let s = new import_obsidian2.Setting(containerEl).addText((component) => {
        component.setValue(shortcut.key).setPlaceholder("Shift").onChange((value) => {
          shortcut.key = value;
          this.plugin.saveSettings();
        });
      }).addButton((component) => {
        let commandName;
        if (available) {
          commandName = findCommand(shortcut.command).name;
        } else {
          commandName = "";
        }
        component.setButtonText("select command").setTooltip(commandName).onClick(() => {
          new commandSuggestion(this.app, this.plugin, shortcut);
          component.setTooltip(commandName);
          containerEl.empty();
          this.display();
        });
      }).addButton((component) => {
        component.setIcon("trash").onClick(() => {
          this.plugin.settings.shortcuts.remove(shortcut);
          this.plugin.saveSettings();
          containerEl.empty();
          this.display();
        });
      });
      if (!available) {
        s.setDesc("the corresponding plugin has been disabled or uninstalled");
      }
    });
    new import_obsidian2.Setting(containerEl).addButton((component) => {
      component.setButtonText("Add").onClick(() => __async(this, null, function* () {
        yield new ShortcutCreator(this.plugin);
        yield this.plugin.saveSettings();
        containerEl.empty();
        this.display();
      }));
    });
  }
};

// src/main.ts
function findCommand(a) {
  let commands = Object.values(this.app.commands.commands);
  for (let i = 0; i < commands.length; i++) {
    let command = commands[i];
    if (command.id === a || command.name === a) {
      return command;
    }
  }
  return null;
}
var DEFAULT_SETTINGS = {
  delay: 500,
  key: "Shift",
  shortcuts: [new class {
    constructor() {
      this.command = "command-palette:open";
      this.key = "Shift";
      this.lastKeyUpTime = Date.now();
    }
  }()]
};
var Doubleshift2 = class extends import_obsidian3.Plugin {
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
      this.commands = Object.values(this.app.commands.commands);
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.settingsTab = new DoubleshiftSettings(this.app, this, this.commands);
      this.addSettingTab(this.settingsTab);
      this.registerDomEvent(window, "keyup", (event) => this.doubleshift(event.key));
    });
  }
  doubleshift(key) {
    this.settings.shortcuts.forEach((shortcut) => {
      if (key !== shortcut.key) {
        shortcut.lastKeyUpTime = 0;
        return;
      }
      if (Date.now() - shortcut.lastKeyUpTime < this.settings.delay) {
        shortcut.lastKeyUpTime = 0;
        app.commands.executeCommandById(shortcut.command);
      } else {
        shortcut.lastKeyUpTime = Date.now();
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL0NvbW1hbmRTdWdnZXN0aW9uLnRzIiwgInNyYy9Eb3VibGVzaGlmdFNldHRpbmdzLnRzIiwgInNyYy9TaG9ydGN1dC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtDb21tYW5kLCBQbHVnaW59IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgRG91Ymxlc2hpZnRTZXR0aW5ncyB9IGZyb20gJy4vRG91Ymxlc2hpZnRTZXR0aW5ncyc7XHJcbmltcG9ydCB7U2hvcnRjdXR9IGZyb20gXCIuL1Nob3J0Y3V0XCI7XHJcblxyXG5pbnRlcmZhY2UgU2V0dGluZ3Mge1xyXG5cdGRlbGF5OiBudW1iZXI7XHJcblx0a2V5OiBzdHJpbmc7XHJcblx0c2hvcnRjdXRzOiBTaG9ydGN1dFtdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmluZENvbW1hbmQoYTogc3RyaW5nKTogQ29tbWFuZHtcclxuXHRsZXQgY29tbWFuZHMgPSBPYmplY3QudmFsdWVzKHRoaXMuYXBwLmNvbW1hbmRzLmNvbW1hbmRzKTtcclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGNvbW1hbmRzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHQvLyBAdHMtaWdub3JlXHJcblx0XHRsZXQgY29tbWFuZDogQ29tbWFuZCA9IGNvbW1hbmRzW2ldO1xyXG5cdFx0aWYoY29tbWFuZC5pZCA9PT0gYSB8fCBjb21tYW5kLm5hbWUgPT09IGEpIHtcclxuXHRcdFx0cmV0dXJuIGNvbW1hbmQ7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBudWxsO1xyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBQYXJ0aWFsPFNldHRpbmdzPiA9IHtcclxuXHRkZWxheTogNTAwLFxyXG5cdGtleTogJ1NoaWZ0JyxcclxuXHRzaG9ydGN1dHM6IFtuZXcgY2xhc3MgaW1wbGVtZW50cyBTaG9ydGN1dCB7XHJcblx0XHRjb21tYW5kID0gJ2NvbW1hbmQtcGFsZXR0ZTpvcGVuJztcclxuXHRcdGtleSA9ICdTaGlmdCc7XHJcblx0XHRsYXN0S2V5VXBUaW1lID0gRGF0ZS5ub3coKTtcclxuXHR9XVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEb3VibGVzaGlmdCBleHRlbmRzIFBsdWdpbiB7XHJcblx0c2V0dGluZ3M6IFNldHRpbmdzO1xyXG5cdGNvbW1hbmRzOiBDb21tYW5kW107XHJcblx0c2V0dGluZ3NUYWI6IERvdWJsZXNoaWZ0U2V0dGluZ3M7XHJcblxyXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG5cdFx0Ly8gQHRzLWlnbm9yZVxyXG5cdFx0dGhpcy5jb21tYW5kcyA9IE9iamVjdC52YWx1ZXModGhpcy5hcHAuY29tbWFuZHMuY29tbWFuZHMpO1xyXG5cdH1cclxuXHJcblxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcblx0fVxyXG5cclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHRcdHRoaXMuc2V0dGluZ3NUYWIgPSBuZXcgRG91Ymxlc2hpZnRTZXR0aW5ncyh0aGlzLmFwcCwgdGhpcywgdGhpcy5jb21tYW5kcyk7XHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIodGhpcy5zZXR0aW5nc1RhYik7XHJcblx0XHR0aGlzLnJlZ2lzdGVyRG9tRXZlbnQod2luZG93LCAna2V5dXAnLCAoZXZlbnQpID0+IHRoaXMuZG91Ymxlc2hpZnQoZXZlbnQua2V5KSk7XHJcblx0fVxyXG5cclxuXHRkb3VibGVzaGlmdChrZXk6IHN0cmluZykge1xyXG5cdFx0dGhpcy5zZXR0aW5ncy5zaG9ydGN1dHMuZm9yRWFjaChzaG9ydGN1dCA9PiB7XHJcblx0XHRcdGlmIChrZXkgIT09IHNob3J0Y3V0LmtleSkge1xyXG5cdFx0XHRcdHNob3J0Y3V0Lmxhc3RLZXlVcFRpbWUgPSAwO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoRGF0ZS5ub3coKSAtIHNob3J0Y3V0Lmxhc3RLZXlVcFRpbWUgPCB0aGlzLnNldHRpbmdzLmRlbGF5KSB7XHJcblx0XHRcdFx0c2hvcnRjdXQubGFzdEtleVVwVGltZSA9IDA7XHJcblxyXG5cdFx0XHRcdC8vIEB0cy1pZ25vcmVcclxuXHRcdFx0XHRhcHAuY29tbWFuZHMuZXhlY3V0ZUNvbW1hbmRCeUlkKHNob3J0Y3V0LmNvbW1hbmQpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzaG9ydGN1dC5sYXN0S2V5VXBUaW1lID0gRGF0ZS5ub3coKTtcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7QXBwLCBDb21tYW5kLCBGdXp6eVN1Z2dlc3RNb2RhbH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCBEb3VibGVzaGlmdCBmcm9tIFwiLi9tYWluXCJcclxuaW1wb3J0IHsgZmluZENvbW1hbmQgfSBmcm9tIFwiLi9tYWluXCJcclxuaW1wb3J0IHtTaG9ydGN1dH0gZnJvbSBcIi4vU2hvcnRjdXRcIjtcclxuaW1wb3J0IHtEb3VibGVzaGlmdFNldHRpbmdzfSBmcm9tIFwiLi9Eb3VibGVzaGlmdFNldHRpbmdzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgY29tbWFuZFN1Z2dlc3Rpb24gZXh0ZW5kcyBGdXp6eVN1Z2dlc3RNb2RhbDxDb21tYW5kPiB7XHJcblxyXG5cdHBsdWdpbjogRG91Ymxlc2hpZnQ7XHJcblx0c2hvcnRjdXQ6IFNob3J0Y3V0O1xyXG5cclxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBEb3VibGVzaGlmdCwgc2hvcnRjdXQ6IFNob3J0Y3V0KSB7XHJcblx0XHRzdXBlcihhcHApO1xyXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcblx0XHR0aGlzLnNob3J0Y3V0ID0gc2hvcnRjdXQ7XHJcblx0XHR0aGlzLnNldFBsYWNlaG9sZGVyKGZpbmRDb21tYW5kKHNob3J0Y3V0LmNvbW1hbmQpPy5uYW1lID8/IHNob3J0Y3V0LmNvbW1hbmQpO1xyXG5cdFx0dGhpcy5vcGVuKCk7XHJcblx0fVxyXG5cclxuXHRnZXRJdGVtcygpOiBDb21tYW5kW10ge1xyXG5cdFx0cmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5wbHVnaW4uY29tbWFuZHMpO1xyXG5cdH1cclxuXHJcblx0Z2V0SXRlbVRleHQoY29tbWFuZDogQ29tbWFuZCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gY29tbWFuZC5uYW1lO1xyXG5cdH1cclxuXHJcblx0b25DaG9vc2VJdGVtKGl0ZW06IENvbW1hbmQsIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcclxuXHRcdGxldCBjb21tYW5kID0gZmluZENvbW1hbmQodGhpcy5nZXRJdGVtVGV4dChpdGVtKSk7XHJcblx0XHR0aGlzLnNob3J0Y3V0LmNvbW1hbmQgPSBjb21tYW5kLmlkO1xyXG5cdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5nc1RhYi5kaXNwbGF5KCk7XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQgRG91Ymxlc2hpZnQsIHtmaW5kQ29tbWFuZH0gZnJvbSBcIi4vbWFpblwiO1xyXG5pbXBvcnQge2NvbW1hbmRTdWdnZXN0aW9ufSBmcm9tIFwiLi9Db21tYW5kU3VnZ2VzdGlvblwiO1xyXG5pbXBvcnQge0FwcCwgQ29tbWFuZCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZ30gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7U2hvcnRjdXRDcmVhdG9yfSBmcm9tIFwiLi9TaG9ydGN1dFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIERvdWJsZXNoaWZ0U2V0dGluZ3MgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHJcblx0cGx1Z2luOiBEb3VibGVzaGlmdDtcclxuXHRjb21tYW5kczogQ29tbWFuZFtdO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBEb3VibGVzaGlmdCwgY29tbWFuZHM6IENvbW1hbmRbXSkge1xyXG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xyXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcblx0XHR0aGlzLmNvbW1hbmRzID0gY29tbWFuZHM7XHJcblx0fVxyXG5cclxuXHRkaXNwbGF5KCk6IHZvaWQge1xyXG5cdFx0bGV0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJEZWxheVwiKVxyXG5cdFx0XHQuc2V0RGVzYyhcIlRoZSBtYXhpbXVtIGRlbGF5IGJldHdlZW4gdHdvIHByZXNzZXMgb2YgdGhlIHJlc3BlY3RpdmUga2V5IGluIDEvMTAgb2YgYSBzZWNvbmRcIilcclxuXHRcdFx0LnNldFRvb2x0aXAoXCJkZXBlbmRpbmcgb24gaG93IGZhc3QgeW91IHR5cGUgYSB0b28gaGlnaCBudW1iZXIgbWlnaHQgYW5ub3kgeW91XCIpXHJcblx0XHRcdC5hZGRTbGlkZXIoIGNvbXBvbmVudCA9PiB7XHJcblx0XHRcdFx0Y29tcG9uZW50XHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVsYXkvMTApXHJcblx0XHRcdFx0XHQuc2V0RHluYW1pY1Rvb2x0aXAoKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWxheSA9IE51bWJlcih2YWx1ZSoxMClcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKFwiU2hvcnRjdXRzXCIpXHJcblx0XHRcdC5zZXREZXNjKFwiYWxsIHNob3J0Y3V0cyB5b3UgaGF2ZSBjdXJyZW50bHkgc2V0IHVwXCIpXHJcblx0XHRcdC5zZXRIZWFkaW5nKClcclxuXHRcdFx0LnNldERpc2FibGVkKHRydWUpXHJcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG9ydGN1dHMuZm9yRWFjaChzaG9ydGN1dCA9PiB7XHJcblx0XHRcdGxldCBhdmFpbGFibGUgPSBmaW5kQ29tbWFuZChzaG9ydGN1dC5jb21tYW5kKSAhPT0gbnVsbDtcclxuXHRcdFx0bGV0IHMgPSBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0XHQuYWRkVGV4dChjb21wb25lbnQgPT4ge1xyXG5cdFx0XHRcdFx0Y29tcG9uZW50XHJcblx0XHRcdFx0XHRcdC5zZXRWYWx1ZShzaG9ydGN1dC5rZXkpXHJcblx0XHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcihcIlNoaWZ0XCIpXHJcblx0XHRcdFx0XHRcdC5vbkNoYW5nZSh2YWx1ZSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0c2hvcnRjdXQua2V5ID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0XHQuYWRkQnV0dG9uKGNvbXBvbmVudCA9PiB7XHJcblx0XHRcdFx0XHRsZXQgY29tbWFuZE5hbWU6IHN0cmluZztcclxuXHRcdFx0XHRcdGlmIChhdmFpbGFibGUpIHtcclxuXHRcdFx0XHRcdFx0Y29tbWFuZE5hbWUgPSBmaW5kQ29tbWFuZChzaG9ydGN1dC5jb21tYW5kKS5uYW1lO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Y29tbWFuZE5hbWUgPSBcIlwiXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRjb21wb25lbnRcclxuXHRcdFx0XHRcdFx0LnNldEJ1dHRvblRleHQoXCJzZWxlY3QgY29tbWFuZFwiKVxyXG5cdFx0XHRcdFx0XHQuc2V0VG9vbHRpcChjb21tYW5kTmFtZSlcclxuXHRcdFx0XHRcdFx0Lm9uQ2xpY2soKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdG5ldyBjb21tYW5kU3VnZ2VzdGlvbih0aGlzLmFwcCwgdGhpcy5wbHVnaW4sIHNob3J0Y3V0KTtcclxuXHRcdFx0XHRcdFx0XHRjb21wb25lbnQuc2V0VG9vbHRpcChjb21tYW5kTmFtZSk7XHJcblx0XHRcdFx0XHRcdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmRpc3BsYXkoKTtcclxuXHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdC5hZGRCdXR0b24oY29tcG9uZW50ID0+IHtcclxuXHRcdFx0XHRcdGNvbXBvbmVudFxyXG5cdFx0XHRcdFx0XHQuc2V0SWNvbihcInRyYXNoXCIpXHJcblx0XHRcdFx0XHRcdC5vbkNsaWNrKCgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG9ydGN1dHMucmVtb3ZlKHNob3J0Y3V0KTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdFx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuZGlzcGxheSgpO1xyXG5cdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdGlmICghYXZhaWxhYmxlKXtcclxuXHRcdFx0XHRzLnNldERlc2MoXCJ0aGUgY29ycmVzcG9uZGluZyBwbHVnaW4gaGFzIGJlZW4gZGlzYWJsZWQgb3IgdW5pbnN0YWxsZWRcIik7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuYWRkQnV0dG9uKGNvbXBvbmVudCA9PiB7XHJcblx0XHRcdFx0Y29tcG9uZW50XHJcblx0XHRcdFx0XHQuc2V0QnV0dG9uVGV4dChcIkFkZFwiKVxyXG5cdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRhd2FpdCBuZXcgU2hvcnRjdXRDcmVhdG9yKHRoaXMucGx1Z2luKTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XHJcblx0XHRcdFx0XHRcdHRoaXMuZGlzcGxheSgpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0fSlcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCBEb3VibGVzaGlmdCBmcm9tIFwiLi9tYWluXCI7XHJcbmltcG9ydCB7Y29tbWFuZFN1Z2dlc3Rpb259IGZyb20gXCIuL0NvbW1hbmRTdWdnZXN0aW9uXCI7XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTaG9ydGN1dHtcclxuXHRrZXk6IHN0cmluZztcclxuXHRjb21tYW5kOiBzdHJpbmc7XHJcblx0bGFzdEtleVVwVGltZTogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU2hvcnRjdXRDcmVhdG9yIHtcclxuXHRjb25zdHJ1Y3RvcihwbHVnaW46IERvdWJsZXNoaWZ0KSB7XHJcblx0XHRsZXQgc2hvcnRjdXQgPSBuZXcgY2xhc3MgaW1wbGVtZW50cyBTaG9ydGN1dCB7XHJcblx0XHRcdGNvbW1hbmQgPSBcIlwiXHJcblx0XHRcdGtleSA9IFwiU2hpZnRcIjtcclxuXHRcdFx0bGFzdEtleVVwVGltZSA9IERhdGUubm93KCk7XHJcblx0XHR9XHJcblx0XHRuZXcgY29tbWFuZFN1Z2dlc3Rpb24ocGx1Z2luLmFwcCwgcGx1Z2luLCBzaG9ydGN1dCk7XHJcblx0XHRwbHVnaW4uc2V0dGluZ3Muc2hvcnRjdXRzLnB1c2goc2hvcnRjdXQpO1xyXG5cdH1cclxufVxyXG4i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Z0JBQWdCLEtBQUs7QUFDL0IsY0FBTSxLQUFLLE9BQU87QUFDbEIsb0JBQVk7QUFDWixhQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBRm5GSixxQkFBcUIsR0FBbUI7QUFDOUMsTUFBSSxXQUFXLE9BQU8sT0FBTyxLQUFLLElBQUksU0FBUztBQUMvQyxXQUFTLElBQUksR0FBRyxJQUFJLFNBQVMsUUFBUSxLQUFLO0FBRXpDLFFBQUksVUFBbUIsU0FBUztBQUNoQyxRQUFHLFFBQVEsT0FBTyxLQUFLLFFBQVEsU0FBUyxHQUFHO0FBQzFDLGFBQU87QUFBQTtBQUFBO0FBR1QsU0FBTztBQUFBO0FBR1IsSUFBTSxtQkFBc0M7QUFBQSxFQUMzQyxPQUFPO0FBQUEsRUFDUCxLQUFLO0FBQUEsRUFDTCxXQUFXLENBQUMsSUFBSSxNQUEwQjtBQUFBLElBQTFCLGNBekJqQjtBQTBCRSxxQkFBVTtBQUNWLGlCQUFNO0FBQ04sMkJBQWdCLEtBQUs7QUFBQTtBQUFBO0FBQUE7QUFJdkIsaUNBQXlDLHdCQUFPO0FBQUEsRUFLekMsZUFBZTtBQUFBO0FBQ3BCLFdBQUssV0FBVyxPQUFPLE9BQU8sSUFBSSxrQkFBa0IsTUFBTSxLQUFLO0FBRS9ELFdBQUssV0FBVyxPQUFPLE9BQU8sS0FBSyxJQUFJLFNBQVM7QUFBQTtBQUFBO0FBQUEsRUFJM0MsZUFBZTtBQUFBO0FBQ3BCLFlBQU0sS0FBSyxTQUFTLEtBQUs7QUFBQTtBQUFBO0FBQUEsRUFJcEIsU0FBUztBQUFBO0FBQ2QsWUFBTSxLQUFLO0FBQ1gsV0FBSyxjQUFjLElBQUksb0JBQW9CLEtBQUssS0FBSyxNQUFNLEtBQUs7QUFDaEUsV0FBSyxjQUFjLEtBQUs7QUFDeEIsV0FBSyxpQkFBaUIsUUFBUSxTQUFTLENBQUMsVUFBVSxLQUFLLFlBQVksTUFBTTtBQUFBO0FBQUE7QUFBQSxFQUcxRSxZQUFZLEtBQWE7QUFDeEIsU0FBSyxTQUFTLFVBQVUsUUFBUSxjQUFZO0FBQzNDLFVBQUksUUFBUSxTQUFTLEtBQUs7QUFDekIsaUJBQVMsZ0JBQWdCO0FBQ3pCO0FBQUE7QUFFRCxVQUFJLEtBQUssUUFBUSxTQUFTLGdCQUFnQixLQUFLLFNBQVMsT0FBTztBQUM5RCxpQkFBUyxnQkFBZ0I7QUFHekIsWUFBSSxTQUFTLG1CQUFtQixTQUFTO0FBQUEsYUFFbkM7QUFDTixpQkFBUyxnQkFBZ0IsS0FBSztBQUFBO0FBQUE7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
