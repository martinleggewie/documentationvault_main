/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => Doubleshift2,
  findCommand: () => findCommand
});
var import_obsidian3 = __toModule(require("obsidian"));

// src/CommandSuggestion.ts
var import_obsidian = __toModule(require("obsidian"));
var commandSuggestion = class extends import_obsidian.FuzzySuggestModal {
  constructor(app2, plugin, shortcut) {
    super(app2);
    this.plugin = plugin;
    this.shortcut = shortcut;
    this.setPlaceholder(findCommand(this.plugin.settings.command).name);
    this.open();
  }
  getItems() {
    return Object.values(this.plugin.commands);
  }
  getItemText(command) {
    return command.name;
  }
  onChooseItem(item, evt) {
    let command = findCommand(this.getItemText(item));
    this.shortcut.command = command.id;
    this.plugin.saveSettings();
  }
};

// src/DoubleshiftSettings.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/Shortcut.ts
var ShortcutCreator = class {
  constructor(plugin) {
    plugin.settings.shortcuts.push(new class {
      constructor() {
        this.command = "command-palette:open";
        this.key = "Shift";
        this.lastKeyUpTime = Date.now();
      }
    }());
  }
};

// src/DoubleshiftSettings.ts
var DoubleshiftSettings = class extends import_obsidian2.PluginSettingTab {
  constructor(app2, plugin, commands) {
    super(app2, plugin);
    this.plugin = plugin;
    this.commands = commands;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Delay").setDesc("The maximum delay between two presses of the respective key in 1/10 of a second").setTooltip("depending on how fast you type a too high number might annoy you").addSlider((component) => {
      component.setValue(this.plugin.settings.delay / 10).setDynamicTooltip().onChange((value) => __async(this, null, function* () {
        this.plugin.settings.delay = Number(value * 10);
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Shortcuts").setDesc("all shortcuts you have currently set up").setHeading().setDisabled(true);
    this.plugin.settings.shortcuts.forEach((shortcut) => {
      new import_obsidian2.Setting(containerEl).addText((component) => {
        component.setValue(shortcut.key).setPlaceholder("Shift").onChange((value) => {
          shortcut.key = value;
          this.plugin.saveSettings();
        });
      }).addButton((component) => {
        let commandName = findCommand(shortcut.command).name;
        component.setButtonText("select command").setTooltip(commandName).onClick(() => {
          new commandSuggestion(this.app, this.plugin, shortcut);
          component.setTooltip(commandName);
          containerEl.empty();
          this.display();
        });
      }).addButton((component) => {
        component.setIcon("trash").onClick(() => {
          this.plugin.settings.shortcuts.remove(shortcut);
          this.plugin.saveSettings();
          containerEl.empty();
          this.display();
        });
      });
    });
    new import_obsidian2.Setting(containerEl).addButton((component) => {
      component.setButtonText("Add").onClick(() => {
        new ShortcutCreator(this.plugin);
        this.plugin.saveSettings();
        containerEl.empty();
        this.display();
      });
    });
  }
};

// src/main.ts
function findCommand(a) {
  let commands = Object.values(this.app.commands.commands);
  for (let i = 0; i < commands.length; i++) {
    let command = commands[i];
    if (command.id === a || command.name === a) {
      return command;
    }
  }
  return null;
}
var DEFAULT_SETTINGS = {
  command: "command-palette:open",
  delay: 500,
  key: "Shift",
  shortcuts: [new class {
    constructor() {
      this.command = "command-palette:open";
      this.key = "Shift";
      this.lastKeyUpTime = Date.now();
    }
  }()]
};
var Doubleshift2 = class extends import_obsidian3.Plugin {
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
      this.commands = Object.values(this.app.commands.commands);
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new DoubleshiftSettings(this.app, this, this.commands));
      this.registerDomEvent(window, "keyup", (event) => this.doubleshift(event.key));
    });
  }
  doubleshift(key) {
    this.settings.shortcuts.forEach((shortcut) => {
      if (key !== shortcut.key) {
        shortcut.lastKeyUpTime = 0;
        return;
      }
      if (Date.now() - shortcut.lastKeyUpTime < this.settings.delay) {
        shortcut.lastKeyUpTime = 0;
        app.commands.executeCommandById(shortcut.command);
      } else {
        shortcut.lastKeyUpTime = Date.now();
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
